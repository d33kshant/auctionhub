// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  avatar    String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  answers   Answer[]
  auctions  Auction[]
  questions Question[]
}

model Auction {
  id String @id @default(uuid())

  title       String
  description String

  price   Int
  highest Int @default(-1)

  sold Boolean @default(false)

  creatorId String
  creator   User   @relation(references: [id], fields: [creatorId])

  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  text String

  creatorId String
  creator   User   @relation(references: [id], fields: [creatorId])

  auctionId String
  auction   Auction @relation(references: [id], fields: [auctionId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id String @id @default(uuid())

  text String

  creatorId String
  creator   User   @relation(references: [id], fields: [creatorId])

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id String @id @default(uuid())

  text String

  creatorId String
  creator   User   @relation(references: [id], fields: [creatorId])

  questionId String
  question   Question @relation(references: [id], fields: [questionId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
